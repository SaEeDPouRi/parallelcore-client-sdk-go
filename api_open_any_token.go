//
// Copyright 2019 Digital Transaction Limited.
// All Rights Reserved.
//

package parallelcore_client_sdk_go

import (
	"fmt"
	"os"
	"strings"
)

// certPath: check OpenAny usage
// expireTimestamp: could be set to -1, if user do not want to track when to renew the client

// OpenAnyByToken is similar to OpenAny, but uses token instead of ID-password based authentication
// to create the connection. You typically need to call the 'non-token' varieties of Open somewhere
// before calling this function to get its returned client.Token to be passed in as a valid token
// for this function.
//
// As such, OpenAnyByToken cannot completely replace OpenAny.
//
// It takes in:
//  - endpointsSpecs string
//  - token string: JWT token generated by a ParallelCore engine
//  - expireTimestamp: used to populate returned client.ExpireTimestamp. This helps applications
//  determine when to Renew clients. See Client.Renew().
func OpenAnyByToken(endpointSpecs string, token string, expireTimestamp int64, certPath string) (*Client, error) {
	// do until endpoints is empty:
	//  randomly select endpoint from endpoints
	//  try to openOne(endpoint) -> c
	//  if ok
	//    return c
	//  remove endpoint from endpoints
	// return error

	var lastError error

	if (oldEndpoints == "") || (oldEndpoints != endpointSpecs) {
		oldEndpoints = endpointSpecs
		endpointsCalled = 0
	}

	endpoints := strings.Split(endpointSpecs, " ")
	for len(endpoints) != 0 {
		i := endpointsCalled % len(endpoints)
		endpoint := endpoints[i]

		client, err := openOne(endpoint, certPath, token)
		if err != nil {
			lastError = err
			endpoints = append(endpoints[:i], endpoints[i+1:]...)
			continue
		}
		endpointsCalled++
		client.expireTimestamp = expireTimestamp
		client.endpointSpecs = endpointSpecs

		return client, nil
	}

	return nil, fmt.Errorf("CLIENT: OpenAnyByToken(%q): Failed to open any client using token. Last error: %w", endpointSpecs, lastError)
}

// OpenAnyByTokenWithCert is a wrapper around OpenAnyByToken. It calls OpenAnyByToken with os.Getenv("PCORE_CERT_PATH")
// as the certPath parameter.
func OpenAnyByTokenWithCert(endpointSpecs string, token string, expireTimestamp int64) (*Client, error) {
	return OpenAnyByToken(endpointSpecs, token, expireTimestamp, os.Getenv("PCORE_CERT_PATH"))
}
